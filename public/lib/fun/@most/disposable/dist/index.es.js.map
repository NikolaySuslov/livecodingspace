{"version":3,"file":"index.es.js","sources":["../src/dispose.js","../src/disposeNone.js","../src/disposeOnce.js","../src/disposeWith.js","../src/disposeAll.js","../src/tryDispose.js","../src/index.js"],"sourcesContent":["/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nexport const dispose = disposable =>\n  disposable.dispose()\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nexport const disposeNone = () => NONE\nconst NONE = new (class DisposeNone {\n  dispose () {}\n})()\n\nexport const isDisposeNone = d =>\n  d === NONE\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\n// Wrap an existing disposable (which may not already have been once()d)\n// so that it will only dispose its underlying resource at most once.\nexport const disposeOnce = disposable =>\n  new DisposeOnce(disposable)\n\nclass DisposeOnce {\n  constructor (disposable) {\n    this.disposed = false\n    this.disposable = disposable\n  }\n\n  dispose () {\n    if (!this.disposed) {\n      this.disposed = true\n      this.disposable.dispose()\n      this.disposable = undefined\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\nimport { disposeOnce } from './disposeOnce'\nimport { curry2 } from '@most/prelude'\n\n// Create a Disposable that will use the provided\n// dispose function to dispose the resource\nexport const disposeWith = curry2((dispose, resource) =>\n  disposeOnce(new DisposeWith(dispose, resource)))\n\n// Disposable represents a resource that must be\n// disposed/released. It aggregates a function to dispose\n// the resource and a handle to a key/id/handle/reference\n// that identifies the resource\nclass DisposeWith {\n  constructor (dispose, resource) {\n    this._dispose = dispose\n    this._resource = resource\n  }\n\n  dispose () {\n    this._dispose(this._resource)\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\nimport { append, reduce, curry2 } from '@most/prelude'\nimport { disposeNone, isDisposeNone } from './disposeNone'\n\n// Aggregate a list of disposables into a DisposeAll\nexport const disposeAll = ds => {\n  const merged = reduce(merge, [], ds)\n  return merged.length === 0 ? disposeNone() : new DisposeAll(merged)\n}\n\n// Convenience to aggregate 2 disposables\nexport const disposeBoth = curry2((d1, d2) =>\n  disposeAll([d1, d2]))\n\nconst merge = (ds, d) =>\n  isDisposeNone(d) ? ds\n    : d instanceof DisposeAll ? ds.concat(d.disposables)\n      : append(d, ds)\n\nclass DisposeAll {\n  constructor (disposables) {\n    this.disposables = disposables\n  }\n\n  dispose () {\n    throwIfErrors(disposeCollectErrors(this.disposables))\n  }\n}\n\n// Dispose all, safely collecting errors into an array\nconst disposeCollectErrors = disposables =>\n  reduce(appendIfError, [], disposables)\n\n// Call dispose and if throws, append thrown error to errors\nconst appendIfError = (errors, d) => {\n  try {\n    d.dispose()\n  } catch (e) {\n    errors.push(e)\n  }\n  return errors\n}\n\n// Throw DisposeAllError if errors is non-empty\nconst throwIfErrors = errors => {\n  if (errors.length > 0) {\n    throw new DisposeAllError(`${errors.length} errors`, errors)\n  }\n}\n\nexport const DisposeAllError = (Error => {\n  function DisposeAllError (message, errors) {\n    Error.call(this, message)\n    this.message = message\n    this.name = DisposeAllError.name\n    this.errors = errors\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, DisposeAllError)\n    }\n\n    this.stack = `${this.stack}${formatErrorStacks(this.errors)}`\n  }\n\n  DisposeAllError.prototype = Object.create(Error.prototype)\n\n  return DisposeAllError\n})(Error)\n\nconst formatErrorStacks = errors =>\n  reduce(formatErrorStack, '', errors)\n\nconst formatErrorStack = (s, e, i) =>\n  s + `\\n[${(i + 1)}] ${e.stack}`\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\nimport { curry3 } from '@most/prelude'\n\n// Try to dispose the disposable.  If it throws, send\n// the error to sink.error with the provided Time value\nexport const tryDispose = curry3((t, disposable, sink) => {\n  try {\n    disposable.dispose()\n  } catch (e) {\n    sink.error(t, e)\n  }\n})\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nexport * from './dispose'\nexport * from './disposeNone'\nexport * from './disposeWith'\nexport * from './disposeOnce'\nexport * from './disposeAll'\nexport * from './tryDispose'\n"],"names":["dispose","disposable","disposeNone","NONE","isDisposeNone","d","disposeOnce","DisposeOnce","disposed","undefined","disposeWith","curry2","resource","DisposeWith","_dispose","_resource","disposeAll","merged","reduce","merge","ds","length","DisposeAll","disposeBoth","d1","d2","concat","disposables","append","disposeCollectErrors","appendIfError","errors","e","push","throwIfErrors","DisposeAllError","message","call","name","Error","captureStackTrace","stack","formatErrorStacks","prototype","Object","create","formatErrorStack","s","i","tryDispose","curry3","t","sink","error"],"mappings":"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"}